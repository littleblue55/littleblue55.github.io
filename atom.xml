<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littleblue</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-05T03:02:28.779Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Littleblue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react - render-props和高阶组件</title>
    <link href="http://example.com/2023/04/13/react-react-14/"/>
    <id>http://example.com/2023/04/13/react-react-14/</id>
    <published>2023-04-13T09:11:23.000Z</published>
    <updated>2023-06-05T03:02:28.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件复用"><a href="#组件复用" class="headerlink" title="组件复用"></a>组件复用</h2><p>处理方式：复用相似的功能(联想函数封装)</p><p>复用什么? <font color='red'>1.state 2.操作state的方法</font>(组件状态逻辑)</p><p>两种方式 :<font color='red'>1.render props模式 2.高阶组件(HOC)</font></p><p>注意:这两种方式<font color='red'>不是新的API</font>，而是利用React自身特点的编码技巧，演化而成的固定模式(写法)</p><h2 id="render-props模式"><a href="#render-props模式" class="headerlink" title="render props模式"></a>render props模式</h2><ul><li><p>问题1:如何拿到该组件中复用的state ?</p></li><li><p>在使用组件时，添加一个值为函数的<font color='red'>prop</font>，通过函数<font color='red'>参数</font>来获取(需要组件内部实现)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Mouse</span> render=&#123; <span class="function">(<span class="params">mouse</span>) =&gt;</span> &#123;&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>问题2:如何渲染任意的UI?</p></li><li><p>使用<font color='red'>该函数的返回值</font>作为要渲染的UI内容(需要组件内部实现 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Mouse</span> render=&#123; <span class="function">(<span class="params">mouse</span>) =&gt;</span> (</span><br><span class="line">    &lt;p&gt;鼠标移动的位置&#123;mouse.<span class="property">x</span>&#125;,&#123;mouse.<span class="property">y</span>&#125;</span><br><span class="line">)&#125; /&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>创建Mouse组件，在组件中提供复用的<font color='red'>状态逻辑</font>代码(1.状态 2.操作状态的方法)</li><li>将要<font color='red'>复用的状态</font>作为 props.render(<font color='red'>state</font>)方法的参数，暴露到组件外部</li><li>使用<font color='red'>props.render()</font>的返回值作为要染的内容</li></ol><h3 id="Mouse组件的复用"><a href="#Mouse组件的复用" class="headerlink" title="Mouse组件的复用"></a>Mouse组件的复用</h3><ul><li>Mouse组件负责:<font color='red'>封装复用的状态逻代码</font>(1.状态 2.操作状态的方法)</li><li>状态:鼠标坐标(x y)</li><li>操作状态的方法:鼠标移动事件</li><li>传入的render prop负责:<font color='red'>使用复用的状态来染UI结构</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;../images/logo192.png&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="comment">//鼠标的x和y坐标轴</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">            <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听鼠标移动</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Reuse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>render-props模式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span> = <span class="string">&#123;(mouse)</span>=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    return (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>鼠标位置  x：&#123;mouse.x&#125;，y：&#123;mouse.y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    )</span></span><br><span class="line"><span class="language-xml">                &#125; &#125;/&gt; </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Mouse</span> <span class="attr">render</span> = <span class="string">&#123;mouse</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">                    return(</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;img&#125;</span> <span class="attr">alt</span>=<span class="string">&#x27;图片&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">position:</span>&#x27;<span class="attr">absolute</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">top:mouse.y</span> <span class="attr">-</span> <span class="attr">96</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">left:mouse.x-</span> <span class="attr">96</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &#125;&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">                    )</span></span><br><span class="line"><span class="language-xml">                &#125;&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="children-代替render"><a href="#children-代替render" class="headerlink" title="children 代替render"></a>children 代替render</h3><ul><li>注意:并不是该模式叫 render props 就必须使用名为render的prop，实际上可以使用任意名称的prop</li><li>把prop是一个函数并且告诉组件要渲染什么内容的技术叫做: render props模式</li><li>推荐:使用 <font color='red'>children</font> 代替 render 属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="comment">//鼠标的x和y坐标轴</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">            <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">children</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听鼠标移动</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Reuse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>render-props模式,children代替render<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Mouse1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;(&#123;x,y&#125;)=&gt;(<span class="tag">&lt;<span class="name">p</span>&gt;</span>鼠标位置  x：&#123;x&#125;，y：&#123;y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Mouse1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><ol><li><p>推荐：给render props添加props校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件中</span></span><br><span class="line">&lt;<span class="title class_">Mouse1</span>&gt;</span><br><span class="line">&#123;<span class="function">(<span class="params">&#123;x,y&#125;</span>)=&gt;</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>鼠标位置  x：&#123;x&#125;，y：&#123;y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)&#125;</span><br><span class="line">&lt;/<span class="title class_">Mouse1</span>&gt;</span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="comment">//引用 PropTypes</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="comment">//鼠标的x和y坐标轴</span></span><br><span class="line">        <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">            <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// return null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">children</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监听鼠标移动</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mouse1</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">children</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件卸载时解除mousemove事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">romoveEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><p>高阶组件：通过包装组件，增强组件功能。</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>创建一个函数，名称以<font color='red'>with</font>开头</li><li>指定函数参数，参数要以<font color='red'>大写字母</font>开头，（要渲染的组件）</li><li>函数的内部创建一个类组件，提供复用的状态逻辑代码，并放回</li><li>在该组件中，渲染参数组件，同时将状态通过props传递给参数组件</li><li>调用该高阶组件，传入要增强的组件，通过返回值拿到增强后的组件，并将其染到页面中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span>(<span class="params">Component</span>)&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Mosue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mouse组件中的render方法</span></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.state</span>&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MousePosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Position</span>)</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line">&lt;<span class="title class_">MousePosition</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;../images/logo192.png&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建高阶组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span> (<span class="title class_">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="comment">// 该组件提供复用的状态逻辑</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标状态</span></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">                <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">romoveEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...this.state</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Mouse</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Position</span> = props =&gt; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        鼠标当前位置：x: &#123;props.x&#125;, y:&#123;props.y&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">)  </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = props =&gt;(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;img&#125;</span> <span class="attr">alt</span>=<span class="string">&#x27;图片&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">position:</span>&#x27;<span class="attr">absolute</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">top:props.y</span> <span class="attr">-</span> <span class="attr">96</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">left:props.x-</span> <span class="attr">96</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;/&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MousePosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Position</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CatPosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Cat</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HighComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;HighComponent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高阶组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MousePosition</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">CatPosition</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置displayName"><a href="#设置displayName" class="headerlink" title="设置displayName"></a>设置displayName</h3><ul><li><p>高阶组件的问题：得到的两个组件名称相同</p><p><img src="D:\work\blog\source_posts\react\react-14\image-20230605104410703.png" alt="image-20230605104410703"></p></li><li><p>解决方法：设置displayName</p></li><li><p>作用：用于设置调试信息</p><p><img src="D:\work\blog\source_posts\react\react-14\image-20230605104631128.png" alt="image-20230605104631128"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setDisplayName</span>(<span class="params">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">WrapperComponent</span>.<span class="property">displayName</span> || <span class="title class_">WrapperComponent</span>.<span class="property">name</span> || <span class="string">&#x27;Component&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span> (<span class="title class_">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="comment">// 该组件提供复用的状态逻辑</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标状态</span></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">                <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">romoveEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...this.state</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Mouse</span>.<span class="property">displayName</span> = <span class="string">`WithMouse<span class="subst">$&#123;setDisplayName(WrapperComponent)&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Mouse</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递props"><a href="#传递props" class="headerlink" title="传递props"></a>传递props</h3><ul><li>问题：props丢失</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;../images/logo192.png&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建高阶组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span> (<span class="title class_">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="comment">// 该组件提供复用的状态逻辑</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">        <span class="comment">//鼠标状态</span></span><br><span class="line">        state = &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        handleMouseMove= <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">                <span class="attr">y</span>: e.<span class="property">clientY</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">romoveEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//---------------------打印props试试看--------------</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mouse:&quot;</span>,<span class="variable language_">this</span>.<span class="property">props</span>)</span><br><span class="line">            <span class="comment">//-------------------------------------------------</span></span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...this.state</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Mouse</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Position</span> = props =&gt; &#123;</span><br><span class="line">    <span class="comment">//------------position的props---------------------</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;position:&quot;</span>,props)</span><br><span class="line">    <span class="comment">//------------------------------------------------</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            鼠标当前位置：x: &#123;props.x&#125;, y:&#123;props.y&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    )  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MousePosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Position</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HighComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;HighComponent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>高阶组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            //--------------传值a=1---------------</span></span><br><span class="line"><span class="language-xml">            //传给Mouse的组件 而不是Position组件</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MousePosition</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            //-----------------------------------</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\work\blog\source_posts\react\react-14\image-20230605105645123.png" alt="image-20230605105645123"></p><ul><li>问题：props丢失</li><li>原因：高阶组件没有往下传递props</li><li>解决：渲染WrapperComponent时将state和props一起传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...this.state</span>&#125;&#123;<span class="attr">...this.props</span>&#125; &gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件复用&quot;&gt;&lt;a href=&quot;#组件复用&quot; class=&quot;headerlink&quot; title=&quot;组件复用&quot;&gt;&lt;/a&gt;组件复用&lt;/h2&gt;&lt;p&gt;处理方式：复用相似的功能(联想函数封装)&lt;/p&gt;
&lt;p&gt;复用什么? &lt;font color=&#39;red&#39;&gt;1.state 2.</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="render-props" scheme="http://example.com/tags/render-props/"/>
    
  </entry>
  
  <entry>
    <title>react-组件的生命周期</title>
    <link href="http://example.com/2023/04/13/react-react-13/"/>
    <id>http://example.com/2023/04/13/react-react-13/</id>
    <published>2023-04-13T09:11:04.000Z</published>
    <updated>2023-04-19T06:14:05.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件的生命周期概述"><a href="#组件的生命周期概述" class="headerlink" title="组件的生命周期概述"></a>组件的生命周期概述</h2><ul><li>意义:组件的生命周期有助于理解组件的运行方式、完成更复杂的组件功能、分析组件错误原因等</li><li><font color='red'>组件的生命周期</font>:组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</li><li>生命周期的每个阶段总是伴随着一些方法调用，这些方法就是生命周期的<font color='red'>钩子函数</font></li><li>钩子函数的作用:为开发人员在不同阶段操作组件提供了时机。</li><li><font color='red'>只有 <strong><font color='red'>类组件</font></strong> 才有生命周期</font></li></ul><h2 id="生命周期的三个阶段"><a href="#生命周期的三个阶段" class="headerlink" title="生命周期的三个阶段"></a>生命周期的三个阶段</h2><p>1.每个阶段的执行时机</p><p>2.每个阶段钩子函数的执行顺序</p><p>3.每个阶段钩子函数的作用</p><p><img src="image-20230413171920880.png"></p><h3 id="创建时（挂载阶段）"><a href="#创建时（挂载阶段）" class="headerlink" title="创建时（挂载阶段）"></a>创建时（挂载阶段）</h3><ul><li><p>执行时机：组件创建时（页面加载时）</p></li><li><p>执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(constructor) --&gt; B(render);</span><br><span class="line">B(render)--&gt;C(componentDidMount);</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建好组件时，最先执行</td><td>1.初始化state <br/>2.为事件处理程序绑定this</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染UI（注意：不能调用setState()）</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成DOM渲染）后</td><td>1.发送网络请求 <br/>2.DOM操作</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Creating</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;生命周期钩子函数：constructor&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;生命周期钩子函数：componentDidMount&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;生命周期钩子函数：render&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件的生命周期<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>创建时<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="D:\work\blog\source_posts\react\react-13\image-20230417160736747.png" alt="image-20230417160736747"></p><p><img src="D:\work\blog\source_posts\react\react-13\image-20230417170746324.png" alt="image-20230417170746324"></p><h3 id="更新时（更新阶段）"><a href="#更新时（更新阶段）" class="headerlink" title="更新时（更新阶段）"></a>更新时（更新阶段）</h3><ul><li><p>执行时机: 1.setState() 2.forceUpdate() 3.组件接收到新的props</p></li><li><p>说明:以上三者任意一种变化，组件就会重新渲染</p></li><li><p>执行顺序:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  graph LR</span><br><span class="line">  A(render) --&gt; B(componentDidUpdate);</span><br><span class="line"></span><br><span class="line">| 钩子函数           | 触发时机                | 作用                                                         |</span><br><span class="line">| ------------------ | ----------------------- | ------------------------------------------------------------ |</span><br><span class="line">| render             | 每次组件渲染都会触发    | 渲染UI(与挂载阶段 是同一个render )                           |</span><br><span class="line">| componentDidUpdate | 组件更新(完成DOM渲染)后 | 1 发送网络请求&lt;br/&gt;2 DOM操作&lt;br/&gt;注意:如果要setState() 必须放在一个if条件中 |</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">import React from &#x27;react&#x27;;</span><br><span class="line">class Counting extends React.Component&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        flag:1</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;count&#125; = this.props</span><br><span class="line">        console.log(&quot;子组件---render&quot;)</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                打豆豆次数：&#123;count&#125;</span><br><span class="line">                &lt;div&gt;flag:&#123;this.state.flag&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate(prevprops)&#123;</span><br><span class="line">        console.log(&quot;子组件---componentDidUpdate&quot;);</span><br><span class="line">        console.log(&quot;prevprops&quot;,prevprops,&quot;props&quot;,this.props) //prevprops &#123;count: 0&#125; props &#123;count: 1&#125;</span><br><span class="line">        if(prevprops.count===5)&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                flag:2</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default class Updating extends React.Component&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        count : 0</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = () =&gt;&#123;</span><br><span class="line">        this.setState (&#123;</span><br><span class="line">            count : this.state.count + 1</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                更新时</span><br><span class="line">                &lt;Counting count=&#123;this.state.count&#125; /&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.handleClick&#125;&gt;打一次&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="卸载时（卸载阶段）"><a href="#卸载时（卸载阶段）" class="headerlink" title="卸载时（卸载阶段）"></a>卸载时（卸载阶段）</h3><p>执行时机:组件从页面中消失</p><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentWillUnmount</td><td>组件卸载（从页面中消失）</td><td>执行清理工作，比如清理定时器</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件的生命周期概述&quot;&gt;&lt;a href=&quot;#组件的生命周期概述&quot; class=&quot;headerlink&quot; title=&quot;组件的生命周期概述&quot;&gt;&lt;/a&gt;组件的生命周期概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;意义:组件的生命周期有助于理解组件的运行方式、完成更复杂的组件功能、分析</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="生命周期" scheme="http://example.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>react-props深入</title>
    <link href="http://example.com/2023/04/13/react-react-12/"/>
    <id>http://example.com/2023/04/13/react-react-12/</id>
    <published>2023-04-13T05:49:35.000Z</published>
    <updated>2023-04-13T09:10:54.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h2><blockquote><p>children 属性:表示组件标签的子节点。当组件标签有子节点时，props就会有该属性</p></blockquote><ul><li>children 属性:表示组件标签的子节点。当组件标签有子节点时，props就会有该属性</li><li>children 属性与普通的props一样，值可以是任意值(文本、React元素、组件，甚至是函数)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">World</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    props.<span class="title function_">children</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>world子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Children</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>children<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Hello</span>&gt;</span>文本元素<span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>JSX结构<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">World</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;()=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                            console.log(&quot;函数子节点&quot;)</span></span><br><span class="line"><span class="language-xml">                        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">World</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20230413144714830.png"></p><h2 id="props检验"><a href="#props检验" class="headerlink" title="props检验"></a>props检验</h2><blockquote><p>对于组件来说，props是外来的，无法保证组件使用者传入什么格式的数据</p></blockquote><ul><li>props校验:允许在创建组件的时候，就指定 props 的类型、格式等</li><li>作用:捕获使用组件时因为props导致的错误，给出明确的错误提示，增加组件的健壮性</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>安装prop-types</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i prop-types</span><br><span class="line">或</span><br><span class="line">yarn add prop-types</span><br></pre></td></tr></table></figure></li><li><p>导入props-types</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> propTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>用props-types添加校验规则</p></li><li><p>校验规则通过prop-types对象来指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Hello</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">colors</span>: propTypes.<span class="property">array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> propTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>props.colors<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Hello</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">colors</span>: propTypes.<span class="property">array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约束规则"><a href="#约束规则" class="headerlink" title="约束规则"></a>约束规则</h3><ol><li>常见类型：array、bool、func、number、object、string</li><li>React元素类型：element</li><li>必填项:isRequired</li><li>特定结构的对象：shape({})</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常见类型</span></span><br><span class="line"><span class="attr">optionFunc</span>:propTypes.<span class="property">func</span>,</span><br><span class="line"><span class="comment">//必填项</span></span><br><span class="line"><span class="attr">requiredFunc</span>:propTypes.<span class="property">func</span>.<span class="property">isRequired</span></span><br><span class="line"><span class="comment">//特定结构的对象</span></span><br><span class="line"><span class="attr">optionalObjectWithShape</span>:propTypes.<span class="title function_">shape</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:propTypes.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">age</span>:propTypes.<span class="property">number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> propTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; colors &#125; = props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;   colors.map( item =&gt; (</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">key</span>=<span class="string">&#123;item&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                ))</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Hello</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">colors</span>: propTypes.<span class="property">array</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">PropTypes</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>PropTypes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">colors</span>=<span class="string">&#123;19&#125;/</span>&gt;</span>  */&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;/* colors` of type `number` supplied to `Hello`, expected `array`. at Hello at PropTypes ( */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">colors</span>=<span class="string">&#123;[</span>&#x27;<span class="attr">red</span>&#x27;,&#x27;<span class="attr">blue</span>&#x27;,&#x27;<span class="attr">green</span>&#x27;]&#125;&gt;</span><span class="tag">&lt;/<span class="name">Hello</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="props默认值-defaultProps"><a href="#props默认值-defaultProps" class="headerlink" title="props默认值 defaultProps"></a>props默认值 <font color='red'>defaultProps</font></h2><p>场景:分页组件-&gt;每页显示条数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组件名.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    变量名:默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Hello</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">pageSize</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;children属性&quot;&gt;&lt;a href=&quot;#children属性&quot; class=&quot;headerlink&quot; title=&quot;children属性&quot;&gt;&lt;/a&gt;children属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;children 属性:表示组件标签的子节点。当组</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通讯" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    
    <category term="children属性" scheme="http://example.com/tags/children%E5%B1%9E%E6%80%A7/"/>
    
    <category term="prop-types" scheme="http://example.com/tags/prop-types/"/>
    
  </entry>
  
  <entry>
    <title>react-跨组件通讯Context</title>
    <link href="http://example.com/2023/04/12/react-react-11/"/>
    <id>http://example.com/2023/04/12/react-react-11/</id>
    <published>2023-04-12T08:14:38.000Z</published>
    <updated>2023-04-12T08:16:41.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cotext"><a href="#Cotext" class="headerlink" title="Cotext"></a>Cotext</h2><p><font color='red'>作用:跨组件传递数据</font>(比如:主题、语言等 )</p><ol><li><p>调用 React.createContext() 创建 Provider(提供数据)和 Consumer(消费数据)两个组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>,<span class="title class_">Consumer</span> &#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure></li><li><p>使用Provider组件作为父节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ContextDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;padding20 context&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    跨组件传递数据：ContextDemo传数据给NextNextChild</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置value属性，表示要传递的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Provider</span> value=<span class="string">&quot;blue&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>调用Consumer 组件接收数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Consumer</span>&gt;</span><br><span class="line">&#123;<span class="function"><span class="params">data</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>接收到的数据：&#123;data&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">&lt;/<span class="title class_">Consumer</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>完整的ContextDemo</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ContextDemo</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/ContextDemo.css&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>,<span class="title class_">Consumer</span> &#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;padding20 child&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Child</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NextChild</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NextChild</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;padding20 next&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            NextChild</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">NextNextChild</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NextNextChild</span> = (<span class="params">props</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;padding20 next2&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            NextNextChild</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;data =&gt; <span class="tag">&lt;<span class="name">span</span>&gt;</span>接收到的数据：&#123;data&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ContextDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&quot;blue&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;padding20 context&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    跨组件传递数据：ContextDemo传数据给NextNextChild</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="image-20230412161630624.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cotext&quot;&gt;&lt;a href=&quot;#Cotext&quot; class=&quot;headerlink&quot; title=&quot;Cotext&quot;&gt;&lt;/a&gt;Cotext&lt;/h2&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;作用:跨组件传递数据&lt;/font&gt;(比如:主题、语言等 )&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通讯" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    
    <category term="Context" scheme="http://example.com/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>react-组件通讯的三种方式</title>
    <link href="http://example.com/2023/04/12/react-react-10/"/>
    <id>http://example.com/2023/04/12/react-react-10/</id>
    <published>2023-04-12T06:52:00.000Z</published>
    <updated>2023-04-12T08:16:14.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父组件传递数据给子组件"><a href="#父组件传递数据给子组件" class="headerlink" title="父组件传递数据给子组件"></a>父组件传递数据给子组件</h2><ol><li>父组件提供要传递的state数据</li><li>给子组件标签添加属性，值为 state 中的数据</li><li>子组件中通过 props 接收父组件中传递的数据</li></ol><blockquote><p>父：<code>&lt;</code>Child name={this.state.userName}<code>/&gt;</code></p><p>子(类组件)：const { name } = this.props</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">userName</span>:<span class="string">&#x27;littlegreen&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;this.state.userName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件传过来的值：name:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子组件传递数据给父组件"><a href="#子组件传递数据给父组件" class="headerlink" title="子组件传递数据给父组件"></a>子组件传递数据给父组件</h2><blockquote><p>思路:利用回调函数，父组件提供回调，子组件调用，将要传递的数据作为回调函数的参数</p></blockquote><ol><li>父组件提供一个回调函数(用于接收数据)</li><li>将该函数作为属性的值，传递给子组件</li><li>子组件通过 props 调用回调函数</li><li>将子组件的数据作为参数传递给回调函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">childData</span>:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line">    <span class="comment">//1.父组件提供一个回调函数(用于接收数据)</span></span><br><span class="line">    getChildData=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件中传递过来的数据：&quot;</span>,data)</span><br><span class="line">        <span class="comment">//4.将子组件中传递过来的数据赋给state中的其中一个，就可以在父组件中显示了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">childData</span>:data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//---------------------------------------</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>子传父：&#123;this.state.childData&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//getData=&#123;this.getChildData&#125; 2.将该函数作为属性的值，传递给子组件</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Child</span> <span class="attr">getData</span>=<span class="string">&#123;this.getChildData&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Brother</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;子组件的数据11111&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//3.点击的时候调用这个getData传递数据过去</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">getData</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击后将数据传给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兄弟组件中的数据传递"><a href="#兄弟组件中的数据传递" class="headerlink" title="兄弟组件中的数据传递"></a>兄弟组件中的数据传递</h2><ul><li>将<font color='red'>共享状态</font>提升到最近的公共父组件中，由<font color='red'>公共父组件</font>管理这个状态</li><li>思想:<font color='red'>状态提升</font></li><li>公共父组件职责:1.提供共享状态2.提供操作共享状态的方法</li><li>要通讯的子组件只需通过 <font color='red'>props</font> 接收状态或操作状态的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    addOne=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>+<span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Child</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Brother</span> <span class="attr">addOne</span>=<span class="string">&#123;this.addOne&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器：&#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Brother</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;brother&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>相对于Child的兄弟组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.props.addOne()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;父组件传递数据给子组件&quot;&gt;&lt;a href=&quot;#父组件传递数据给子组件&quot; class=&quot;headerlink&quot; title=&quot;父组件传递数据给子组件&quot;&gt;&lt;/a&gt;父组件传递数据给子组件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;父组件提供要传递的state数据&lt;/li&gt;
&lt;li&gt;给子</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通讯" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>react-组件通讯</title>
    <link href="http://example.com/2023/04/12/react-react-09/"/>
    <id>http://example.com/2023/04/12/react-react-09/</id>
    <published>2023-04-12T06:21:27.000Z</published>
    <updated>2023-04-12T06:51:50.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件通讯介绍"><a href="#组件通讯介绍" class="headerlink" title="组件通讯介绍"></a>组件通讯介绍</h2><p><font color='red'>组件</font>是独立且封闭的单元，默认情况下，只能使用组件自己的数据。在组件化过程中，我们将一个完整的功能拆分成多个组件，以更好的完成整个应用的功能。而在这个过程中，多个组件之间不可避免的要共享某些数据为了实现这些功能，就需要打破组件的独立封闭性，让其与外界沟通。这个过程就是<font color='red'>组件通讯</font></p><h2 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h2><ul><li>组件是封闭的，要接收外部数据应该通过props来实现</li><li><font color='red'>props的作用: 接收传递给组件的数据</font></li><li>传递数据:给组件标签添加<font color='red'>属性</font></li><li>接收数据:函数组件通过参数<font color='red'>props</font>接收数据，类组件通过<font color='red'>this.props</font>接收数据</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Communicate.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">World</span> <span class="keyword">from</span> <span class="string">&#x27;./World&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Communicate</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title class_">Hello</span> = <span class="function">(<span class="params">props</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>-----------函数组件-------------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:&#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>age:&#123;props.age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                props组件通讯</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">this.Hello</span> <span class="attr">name</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">age</span>=<span class="string">&#123;19&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">World</span> <span class="attr">name</span>=<span class="string">&quot;zxc&quot;</span> <span class="attr">age</span>=<span class="string">&#123;14&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//World.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">World</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name,age &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>--------类组件---------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>可以给组件传递任意类型的数据</li><li>props 是<font color='red'>只读</font>的对象，只能读取属性的值，无法修改对象</li><li>注意:使用类组件时，如果写了<font color='cornflowerblue'>构造函数</font>，<font color='cornflowerblue'>应该将 props 传递给 super()</font>，否则，无法在构造函数中获取到 props!</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">World</span> </span><br><span class="line">    name=<span class="string">&quot;zxc&quot;</span> </span><br><span class="line">    age=&#123;<span class="number">14</span>&#125;</span><br><span class="line">    color = &#123;[<span class="string">&#x27;white&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]&#125;</span><br><span class="line">    fn = &#123;<span class="function">()=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是一个函数&quot;</span>)&#125;</span><br><span class="line">    pn = &#123;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">World</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; name,age,color,fn,pn &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(color)</span><br><span class="line">        <span class="title function_">fn</span>()</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>--------类组件---------<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:&#123;name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>age:&#123;age&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;pn&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组件通讯介绍&quot;&gt;&lt;a href=&quot;#组件通讯介绍&quot; class=&quot;headerlink&quot; title=&quot;组件通讯介绍&quot;&gt;&lt;/a&gt;组件通讯介绍&lt;/h2&gt;&lt;p&gt;&lt;font color=&#39;red&#39;&gt;组件&lt;/font&gt;是独立且封闭的单元，默认情况下，只能使用组件自己的数据</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="组件通讯" scheme="http://example.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>react-表单处理</title>
    <link href="http://example.com/2023/04/10/react-react-08/"/>
    <id>http://example.com/2023/04/10/react-react-08/</id>
    <published>2023-04-10T06:59:22.000Z</published>
    <updated>2023-04-12T08:18:13.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h2><ul><li>HTML中的表单元素是可输入的，也就是有自己的可变状态</li><li>而，React中可变状态通常保存在state 中，并且只能通过setState()方法来修改</li><li>React将 state 与表单元素值value绑定到一起，由 state 的值来控制表单元素的值</li><li>受控组件：其值受到React控制的表单元素</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>在state 中添加一个状态，作为表单元素的value值(控制表单元素值的来源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">count : <span class="number">0</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给表单元素绑定 change 事件，将 表单元素的值设置为 state 的值(控制表单元素值的变化)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>this.setState(&#123;count:e.target.value&#125;) &#125; &gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><blockquote><p>输入框，富文本框，下拉框，复选框</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;bj&quot;</span>,</span><br><span class="line">    <span class="attr">isChecked</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 富文本框</span></span><br><span class="line">  textareaContent = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">content</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下拉框</span></span><br><span class="line">  selectValue = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">value</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 复选框</span></span><br><span class="line">  inputChecked = <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">isChecked</span>: e.<span class="property">target</span>.<span class="property">checked</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>表单处理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 输入框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span>=&gt;</span>this.setState(&#123;count:e.target.value&#125;) &#125; &gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 富文本框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.textareaContent&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 下拉框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;</span> <span class="attr">this.state.value</span> &#125; <span class="attr">onChange</span>=<span class="string">&#123;this.selectValue&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 复选框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.inputChecked&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化：name属性"><a href="#优化：name属性" class="headerlink" title="优化：name属性"></a>优化：name属性</h3><ol><li>给表单元素添加name属性，名称与 state相同</li><li>根据表单元素类型获取对应值</li><li>在change事件处理程序中通过[name] 来修改对应的state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;bj&quot;</span>,</span><br><span class="line">    <span class="attr">isChecked</span>:<span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = e.<span class="property">target</span></span><br><span class="line">    <span class="keyword">const</span> value = target.<span class="property">type</span>===<span class="string">&#x27;checkbox&#x27;</span> ? target.<span class="property">checked</span> : target.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> name = target.<span class="property">name</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      [name]: value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//----------------------------------------------------------------------</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>表单处理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 输入框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;count&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.count&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">this.handleChange</span> &#125; &gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 富文本框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&#x27;content&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.content&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">this.handleChange</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 下拉框 */&#125; </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;value&#x27;</span> <span class="attr">value</span>=<span class="string">&#123;</span> <span class="attr">this.state.value</span> &#125; <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">this.handleChange</span> &#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 复选框 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&#x27;isChecked&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;checkbox&#x27;</span> <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;</span> <span class="attr">this.handleChange</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h2><ul><li>说明:借助于ref，使用原生DOM方式来获取表单元素值</li><li>ref的作用:获取DOM或组件</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>调用 React.createRef() 方法创建一个 ref 对象</li><li>将创建好的ref对象添加到文本框中</li><li>通过ref 对象获取到文本框的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">// 调用 React.createRef() 方法创建一个 ref 对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">contentRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  getContent = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 通过ref 对象获取到文本框的值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文本框的值：&quot;</span>,<span class="variable language_">this</span>.<span class="property">contentRef</span>.<span class="property">current</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 将创建好的ref对象添加到文本框中 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">ref</span>=<span class="string">&#123;this.contentRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.getContent&#125;</span>&gt;</span>获取文本框的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><font color='green'>推荐使用受控组件的方式来处理表单</font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;受控组件&quot;&gt;&lt;a href=&quot;#受控组件&quot; class=&quot;headerlink&quot; title=&quot;受控组件&quot;&gt;&lt;/a&gt;受控组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HTML中的表单元素是可输入的，也就是有自己的可变状态&lt;/li&gt;
&lt;li&gt;而，React中可变状态通常保存在st</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-JSX中抽离事件处理程序和this指向问题</title>
    <link href="http://example.com/2023/04/10/react-react-07/"/>
    <id>http://example.com/2023/04/10/react-react-07/</id>
    <published>2023-04-10T06:55:46.000Z</published>
    <updated>2023-04-10T07:30:01.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从JSX中抽离事件处理程序"><a href="#从JSX中抽离事件处理程序" class="headerlink" title="从JSX中抽离事件处理程序"></a>从JSX中抽离事件处理程序</h2><ul><li>如果JSX中参杂了过多的js逻辑代码，会显得非常混乱</li><li>推荐：<font color='red'>将逻辑抽离到单独的方法中</font>，保证JSX 结构清晰</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line">  <span class="comment">//点击 subOne() 时报错 Cannot read properties of undefined (reading &#x27;setState&#x27;)</span></span><br><span class="line">  <span class="title function_">subOne</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件处理中的this&quot;</span>,<span class="variable language_">this</span>)<span class="comment">//事件处理中的this undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//-------------------------------------</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.subOne</span> &#125;&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.addOne</span> &#125;&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原因：事件处理程序中 this 的值为 undefined</li><li>希望：this 指向组件实例(render方法中的this即为组件实例)</li></ul><h2 id="事件绑定中this指向问题"><a href="#事件绑定中this指向问题" class="headerlink" title="事件绑定中this指向问题"></a>事件绑定中this指向问题</h2><h3 id="1-箭头函数"><a href="#1-箭头函数" class="headerlink" title="1.箭头函数"></a>1.箭头函数</h3><blockquote><p>利用箭头函数自身不绑定this的特点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//------------------------------</span></span><br><span class="line">  addOne () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//------------------------------</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//-----------------------------------------------</span></span><br><span class="line"><span class="language-xml">//箭头函数中的this指向外部环境，此处为: render()方法</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> this.addOne() &#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//-----------------------------------------------</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Function-prototype-bind"><a href="#2-Function-prototype-bind" class="headerlink" title="2.Function.prototype.bind"></a>2.Function.prototype.bind</h3><blockquote><p>利用ES5中的bind方法，将事件处理程序中的this与组件实例绑定到一起</p><p>this.addOne =  this.addOne.bind(this)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span> () &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addOne</span> =  <span class="variable language_">this</span>.<span class="property">addOne</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">//-----------------------------------</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      count : <span class="number">0</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addOne () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.addOne</span> &#125;&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-class的实例方法"><a href="#3-class的实例方法" class="headerlink" title="3.class的实例方法"></a>3.class的实例方法</h3><blockquote><p>利用箭头函数形式的class实例方法</p></blockquote><p>注意:该语法是实验性语法，但是，由于babel的存在可以直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//-----------------------------</span></span><br><span class="line">  subOne = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//------------------------------</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.subOne</span> &#125;&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;从JSX中抽离事件处理程序&quot;&gt;&lt;a href=&quot;#从JSX中抽离事件处理程序&quot; class=&quot;headerlink&quot; title=&quot;从JSX中抽离事件处理程序&quot;&gt;&lt;/a&gt;从JSX中抽离事件处理程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果JSX中参杂了过多的js逻辑代码，会</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="this" scheme="http://example.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>react-state</title>
    <link href="http://example.com/2023/04/10/react-react-06/"/>
    <id>http://example.com/2023/04/10/react-react-06/</id>
    <published>2023-04-10T05:52:08.000Z</published>
    <updated>2023-04-10T07:30:14.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有状态-state-组件与无状态组件"><a href="#有状态-state-组件与无状态组件" class="headerlink" title="有状态(state)组件与无状态组件"></a>有状态(state)组件与无状态组件</h2><ul><li>函数组件又叫做<font color='red'>无状态组件</font>，类组件又叫做<font color='red'>有状态组件</font></li><li>状态(state)即<font color='red'>数据</font></li><li><font color='red'>函数</font>组件没有自己的状态，<font color='red'>只负责数据展示(静)</font></li><li><font color='red'>类</font>组件有自己的状态，<font color='red'>负责更新 UI</font>，让页面“动” 起来</li></ul><h2 id="state的基本使用"><a href="#state的基本使用" class="headerlink" title="state的基本使用"></a>state的基本使用</h2><ul><li>状态即数据</li><li>状态是私有的，只能在组件内部使用通过 </li><li>this.state来获取状态</li></ul><blockquote><p>初始化state，并使用state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="comment">// 初始化state</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      count : <span class="number">0</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简化初始化state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="comment">//简化语法初始化state</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="setState-修改状态"><a href="#setState-修改状态" class="headerlink" title="setState() 修改状态"></a>setState() 修改状态</h2><ul><li>状态是可变的</li><li>语法:this.setState({要修改的数据})</li><li>注意:<font color='red'>不要直接修改 state 中的值，这是错误的 ! ! !</font></li><li>setState()作用：<ol><li><font color='red'>修改state</font></li><li><font color='red'>更新UI</font></li></ol></li><li>思想：<font color='red'>数据驱动视图</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count : <span class="number">0</span> </span><br><span class="line">  &#125;</span><br><span class="line">  subOne = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> - <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  addOne = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      count : <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>状态（state）<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.subOne</span> &#125;&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>计数器:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.addOne</span> &#125;&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;有状态-state-组件与无状态组件&quot;&gt;&lt;a href=&quot;#有状态-state-组件与无状态组件&quot; class=&quot;headerlink&quot; title=&quot;有状态(state)组件与无状态组件&quot;&gt;&lt;/a&gt;有状态(state)组件与无状态组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="state" scheme="http://example.com/tags/state/"/>
    
  </entry>
  
  <entry>
    <title>react-事件处理</title>
    <link href="http://example.com/2023/04/10/react-react-05/"/>
    <id>http://example.com/2023/04/10/react-react-05/</id>
    <published>2023-04-10T03:50:14.000Z</published>
    <updated>2023-04-10T07:30:24.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><ul><li>React 事件绑定语法与DOM 事件语法相似</li><li>语法: <font color='red'>on+事件名称={事件处理程序}</font>，比如：onClick={()=&gt;{}}</li><li>注意: React事件采用驼峰命名法，比如:onMouseEnter、onFocus</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>事件绑定demo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ul><li>可以通过<font color='red'>事件处理程序的参数</font>获取到事件对象</li><li>React 中的事件对象叫做:合成事件(对象)</li><li>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;阻止跳转&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://localhost:4000/&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>事件绑定demo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;React 事件绑定语法与DOM 事件语法相似&lt;/li&gt;
&lt;li&gt;语法: &lt;font color=&#39;red&#39;&gt;o</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-组件</title>
    <link href="http://example.com/2023/04/07/react-react-04/"/>
    <id>http://example.com/2023/04/07/react-react-04/</id>
    <published>2023-04-07T08:48:10.000Z</published>
    <updated>2023-04-10T07:30:39.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-组件的介绍"><a href="#react-组件的介绍" class="headerlink" title="react 组件的介绍"></a>react 组件的介绍</h2><ul><li>组件是React的<font color='red'>一等公民</font>，使用 React就是在用组件</li><li>组件表示页面中的部分功能</li><li>组合多个组件实现完整的页面功能</li><li>特点:可复用、独立、可组合</li></ul><h2 id="组件的两种创建方式"><a href="#组件的两种创建方式" class="headerlink" title="组件的两种创建方式"></a>组件的两种创建方式</h2><h3 id="使用函数创建组件–函数组件"><a href="#使用函数创建组件–函数组件" class="headerlink" title="使用函数创建组件–函数组件"></a>使用函数创建组件–函数组件</h3><ul><li>函数组件:使用JS的函数(或箭头函数)创建的组件</li><li>约定1:函数名称必须以<font color='red'>大写字母开头</font></li><li>约定2:函数组件<font color='red'>必须有返回值</font>，表示该组件的结构</li><li>如果返回值为null，表示不渲染内容。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;header&quot;</span>&gt;</span>zxc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>); </span><br></pre></td></tr></table></figure><ul><li>渲染函数组件:用函数名作为组件标签名</li><li>组件标签可以是单标签也可以是双标签</li></ul><h3 id="使用类创建组件–类组件"><a href="#使用类创建组件–类组件" class="headerlink" title="使用类创建组件–类组件"></a>使用类创建组件–类组件</h3><ul><li>类组件：使用ES6的class 创建的组件</li><li>约定1：类名称也必须以<font color='red'>大写字母</font>开头</li><li>约定2：类组件应该继承<font color='red'>React.Component</font>父类，从而可以使用父类中提供的方法或属性</li><li>约定3：类组件必须提供<font color='red'>render()</font>方法</li><li>约定4：<font color='red'>render()</font>方法必须有返回值，表示该组件的结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;header&quot;</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="组件抽离为独立的js文件"><a href="#组件抽离为独立的js文件" class="headerlink" title="组件抽离为独立的js文件"></a>组件抽离为独立的js文件</h2><p>步骤</p><ol><li>创建Hello.js(组件名.js)</li><li>在Hello.js文件中<ol><li>引入React</li><li>创建函数组件/类组件</li><li>导出组件</li></ol></li><li>在index.js中引入组件</li><li>渲染组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hello.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;header&quot;</span>&gt;</span>组件，独立的js<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Hello</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./Hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;react-组件的介绍&quot;&gt;&lt;a href=&quot;#react-组件的介绍&quot; class=&quot;headerlink&quot; title=&quot;react 组件的介绍&quot;&gt;&lt;/a&gt;react 组件的介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;组件是React的&lt;font color=&#39;red&#39;&gt;一</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-JSX与JavaScript</title>
    <link href="http://example.com/2023/04/07/react-react-03/"/>
    <id>http://example.com/2023/04/07/react-react-03/</id>
    <published>2023-04-07T07:29:04.000Z</published>
    <updated>2023-04-10T07:30:58.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在JSX中使用JavaScript表达式"><a href="#在JSX中使用JavaScript表达式" class="headerlink" title="在JSX中使用JavaScript表达式"></a>在JSX中使用JavaScript表达式</h2><h3 id="嵌入JS表达式"><a href="#嵌入JS表达式" class="headerlink" title="嵌入JS表达式"></a>嵌入JS表达式</h3><ul><li>数据存储在JS中</li><li>语法：{JavaScript表达式}</li><li>注意：语法中是<font color='red'>单大括号</font>，不是双大括号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;zxc&quot;</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li><p><font color='red'>单大括号</font>中可以直接使用任意的JavaScript表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = (<span class="params"></span>) =&gt; <span class="string">&#x27;Hi!!!&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;zxc&quot;</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      1+8=&#123;1+8&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;sayHi()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>JSX自身也是JavaScript表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>zxc<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;name&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>注意：JavaScript中的对象是一个例外，一般只会出现在style属性中</p></li><li><p>注意：<font color='red'>不能在{}中出现语句</font>（比如：if/for等）</p></li></ul><h2 id="JSX的条件渲染"><a href="#JSX的条件渲染" class="headerlink" title="JSX的条件渲染"></a>JSX的条件渲染</h2><ul><li>场景:loading效果</li><li>条件渲染:根据条件染特定的JSX结构</li><li>可以使用if/else或三元运算符或逻辑与运算符来实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isLoading = <span class="literal">false</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>正在加载中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>记载完毕<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData1</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> isLoading?(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>正在加载中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>):(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>记载完毕<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loadData2</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> isLoading &amp;&amp; (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>正在加载中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;loadData()&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;loadData1()&#125;</span></span><br><span class="line"><span class="language-xml">    &#123;loadData2()&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="JSX中的列表渲染"><a href="#JSX中的列表渲染" class="headerlink" title="JSX中的列表渲染"></a>JSX中的列表渲染</h2><ul><li>如果要渲染一组数据，应该使用数组的<font color='red'>map()</font>方法</li><li>注意:染列表时应该添加 key 属性，<font color='red'>key属性的值要保证唯一</font></li><li>原则:map()遍历谁，就给谁添加 key 属性</li><li>注意:<font color='red'>尽量避免使用索引号作为 key</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;zxxc1&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;zxxc2&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;zxxc3&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;songs.map(item=&gt;(<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&quot;&#123;item.id&#125;&quot;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>))&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="JSX中样式处理"><a href="#JSX中样式处理" class="headerlink" title="JSX中样式处理"></a>JSX中样式处理</h2><h3 id="1-行内样式"><a href="#1-行内样式" class="headerlink" title="1.行内样式"></a>1.行内样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;,<span class="attr">backgroundColor:</span>&#x27;<span class="attr">black</span>&#x27;&#125;&#125;&gt;</span>行内样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-类名-className"><a href="#2-类名-className" class="headerlink" title="2.类名 className"></a>2.类名 className</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span>类名<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* index.css文件 */</span></span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;在JSX中使用JavaScript表达式&quot;&gt;&lt;a href=&quot;#在JSX中使用JavaScript表达式&quot; class=&quot;headerlink&quot; title=&quot;在JSX中使用JavaScript表达式&quot;&gt;&lt;/a&gt;在JSX中使用JavaScript表达式&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-JSX的基本使用和注意点</title>
    <link href="http://example.com/2023/04/07/react-react-02/"/>
    <id>http://example.com/2023/04/07/react-react-02/</id>
    <published>2023-04-07T04:01:20.000Z</published>
    <updated>2023-04-10T07:31:12.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-JSX的基本使用"><a href="#1-JSX的基本使用" class="headerlink" title="1.JSX的基本使用"></a>1.JSX的基本使用</h2><h2 id="1-1-createElement-的问题"><a href="#1-1-createElement-的问题" class="headerlink" title="1.1 createElement()的问题"></a>1.1 createElement()的问题</h2><ol><li>繁琐不简洁</li><li>不直观，无法一眼看出所描述的结构。</li><li>不优雅用户体验不爽</li></ol><h3 id="1-2-JSX简介"><a href="#1-2-JSX简介" class="headerlink" title="1.2 JSX简介"></a>1.2 JSX简介</h3><p>JSX是JavaScript XML的缩写，表示在JavaScript代码中写XML（HTML）格式的代码</p><p>优势：声明式语法更加直观，与HTML结构相同，降低了学习成本、提升了开发效率</p><p><font color='red'>JSX是react的核心内容</font></p><p><img src="D:\work\blog\source_posts\react\react-02\image-20230407145745262.png" alt="image-20230407145745262"></p><h3 id="1-3-JSX使用"><a href="#1-3-JSX使用" class="headerlink" title="1.3 JSX使用"></a>1.3 JSX使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, react<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(title);</span><br></pre></td></tr></table></figure><h3 id="1-4-注意点"><a href="#1-4-注意点" class="headerlink" title="1.4 注意点"></a>1.4 注意点</h3><ol><li><p>React元素的属性名使用驼峰命名法</p></li><li><p>特殊属性名：class -&gt; <font color="red">className</font>、for -&gt; htmlFor、tabindex-&gt; tablndex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>hello, react<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>没有子节点的React元素可以用<font color="red">/&gt;</font>结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, react <span class="tag">&lt;<span class="name">span</span> /&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="comment">// &lt;span&gt;&lt;/span&gt; =&gt; &lt;span /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>推荐：使用<font color="red">小括号包裹JSX</font>，从而避免JS中自动插入分号陷阱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="comment">//使用小括号包裹JSX</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello, react</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      你好</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(title);</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-为什么脚手架中可以直接使用JSX"><a href="#2-为什么脚手架中可以直接使用JSX" class="headerlink" title="2.为什么脚手架中可以直接使用JSX"></a>2.为什么脚手架中可以直接使用JSX</h2><ol><li>JSX不是标准的ECMAScript语法，它是ECMAScript的语法扩展</li><li>需要使用 babel编译处理后，才能在浏览器环境中使用</li><li>create-react-app脚手架中已经默认有该配置，无需手动配置</li><li>编译JSX语法的包为: @babel/preset-react</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-JSX的基本使用&quot;&gt;&lt;a href=&quot;#1-JSX的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1.JSX的基本使用&quot;&gt;&lt;/a&gt;1.JSX的基本使用&lt;/h2&gt;&lt;h2 id=&quot;1-1-createElement-的问题&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-基本使用和脚手架</title>
    <link href="http://example.com/2023/04/07/react-react-01/"/>
    <id>http://example.com/2023/04/07/react-react-01/</id>
    <published>2023-04-07T03:27:43.000Z</published>
    <updated>2023-04-10T07:31:23.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-react-安装"><a href="#1-react-安装" class="headerlink" title="1.react 安装"></a>1.react 安装</h2><p>安装命令</p><blockquote><p>npm i react react-dom</p></blockquote><ul><li>react包是核心，提供创建元素、组件等功能</li><li>react-dom包提供DOM相关功能等</li></ul><h2 id="2-react-基本使用"><a href="#2-react-基本使用" class="headerlink" title="2.react 基本使用"></a>2.react 基本使用</h2><p>1.引用react和react-dom两个js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建react元素</p><ul><li>参数一：元素名称</li><li>参数二：元素属性</li><li>参数三：元素的子节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;hello,react&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3.渲染react元素</p><ul><li>参数一：要渲染的react元素</li><li>参数二：挂载点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(title,document.getElementById(&#x27;root&#x27;))</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>react的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.引入js文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  2.创建react元素 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数一：元素名称</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数二：元素属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数三：元素的子节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;hello,react&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.渲染react元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数一：要渲染的react元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 参数二：挂载点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-react脚手架初始化项目"><a href="#3-react脚手架初始化项目" class="headerlink" title="3.react脚手架初始化项目"></a>3.react脚手架初始化项目</h2><h3 id="1-使用react脚手架初始化项目"><a href="#1-使用react脚手架初始化项目" class="headerlink" title="1.使用react脚手架初始化项目"></a>1.使用react脚手架初始化项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create<span class="literal">-react-app</span> project<span class="literal">-name</span></span><br></pre></td></tr></table></figure><h3 id="2-启动项目，在项目的根目录执行名利npm-start或者yarn-start"><a href="#2-启动项目，在项目的根目录执行名利npm-start或者yarn-start" class="headerlink" title="2.启动项目，在项目的根目录执行名利npm start或者yarn start"></a>2.启动项目，在项目的根目录执行名利<strong>npm start</strong>或者<strong>yarn start</strong></h3><h3 id="3-使用react脚手架初始化项目"><a href="#3-使用react脚手架初始化项目" class="headerlink" title="3.使用react脚手架初始化项目"></a>3.使用react脚手架初始化项目</h3><h4 id="npx命令介绍"><a href="#npx命令介绍" class="headerlink" title="npx命令介绍"></a>npx命令介绍</h4><ul><li>npm v5.2.0引入的一条命令</li><li>目的：提升包内提供的命令行工具的使用体验</li><li>原来：<strong>无需安装脚手架包</strong>，就可以直接使用这个包提供的命令</li></ul><h3 id="4-脚手架初始化项目其他的命令"><a href="#4-脚手架初始化项目其他的命令" class="headerlink" title="4.脚手架初始化项目其他的命令"></a>4.脚手架初始化项目其他的命令</h3><ol><li>npx create-react-app project-name</li><li>npm init react-app project-name</li><li>yarn create react-app project-name</li></ol><h2 id="4-项目中使用"><a href="#4-项目中使用" class="headerlink" title="4.项目中使用"></a>4.项目中使用</h2><p>1.导入react和react-dom两个包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2.调用React.createElement()方法创建react元素</p><p>3.调用ReactDOM.render()方法渲染react元素到页面中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-react-安装&quot;&gt;&lt;a href=&quot;#1-react-安装&quot; class=&quot;headerlink&quot; title=&quot;1.react 安装&quot;&gt;&lt;/a&gt;1.react 安装&lt;/h2&gt;&lt;p&gt;安装命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm i react r</summary>
      
    
    
    
    <category term="react" scheme="http://example.com/categories/react/"/>
    
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>若依导入数据</title>
    <link href="http://example.com/2023/03/27/%E8%8B%A5%E4%BE%9D-%E8%8B%A5%E4%BE%9D-03/"/>
    <id>http://example.com/2023/03/27/%E8%8B%A5%E4%BE%9D-%E8%8B%A5%E4%BE%9D-03/</id>
    <published>2023-03-27T07:49:51.000Z</published>
    <updated>2023-03-27T08:04:13.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h2><p>页面加上 导入按钮，点击导入时弹出的dialog</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;info&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">plain</span></span></span><br><span class="line"><span class="tag">    <span class="attr">icon</span>=<span class="string">&quot;el-icon-upload2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;handleImport&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-hasPermi</span>=<span class="string">&quot;[&#x27;asset:asset:import&#x27;]&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        导入</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:title</span>=<span class="string">&quot;upload.title&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;upload.open&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">append-to-body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;.xlsx, .xls&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:headers</span>=<span class="string">&quot;upload.headers&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:action</span>=<span class="string">&quot;upload.url + &#x27;?updateSupport=1&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">&quot;upload.isUploading&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-progress</span>=<span class="string">&quot;handleFileUploadProgress&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-success</span>=<span class="string">&quot;handleFileSuccess&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">drag</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitFileForm&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;upload.open = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入getToken</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/auth&quot;</span>;</span><br></pre></td></tr></table></figure><p>data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">upload</span>: &#123;</span><br><span class="line">    <span class="comment">// 是否显示弹出层（用户导入）</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 弹出层标题（用户导入）</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="comment">// 是否禁用上传</span></span><br><span class="line">    <span class="attr">isUploading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 是否更新已经存在的用户数据</span></span><br><span class="line">    <span class="attr">updateSupport</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 设置上传的请求头部</span></span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer &quot;</span> + <span class="title function_">getToken</span>() &#125;,</span><br><span class="line">    <span class="comment">// 上传的地址</span></span><br><span class="line">    <span class="attr">url</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span> + <span class="string">&quot;/asset/asset/importData&quot;</span> <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>methods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleImport</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">upload</span>.<span class="property">title</span> = <span class="string">&quot;资产信息导入&quot;</span>; <span class="comment">// todo</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">upload</span>.<span class="property">open</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 文件上传中处理</span></span><br><span class="line"><span class="title function_">handleFileUploadProgress</span>(<span class="params">event, file, fileList</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">upload</span>.<span class="property">isUploading</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 文件上传成功处理</span></span><br><span class="line"><span class="title function_">handleFileSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">upload</span>.<span class="property">open</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">upload</span>.<span class="property">isUploading</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">clearFiles</span>();</span><br><span class="line">    <span class="variable language_">this</span>.$alert(<span class="string">&quot;&lt;div style=&#x27;overflow: auto;overflow-x: hidden;max-height: 70vh;padding: 10px 20px 0;&#x27;&gt;&quot;</span> + response.<span class="property">msg</span> + <span class="string">&quot;&lt;/div&gt;&quot;</span>, <span class="string">&quot;导入结果&quot;</span>, &#123; <span class="attr">dangerouslyUseHTMLString</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 提交上传文件</span></span><br><span class="line"><span class="title function_">submitFileForm</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">submit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端处理&quot;&gt;&lt;a href=&quot;#前端处理&quot; class=&quot;headerlink&quot; title=&quot;前端处理&quot;&gt;&lt;/a&gt;前端处理&lt;/h2&gt;&lt;p&gt;页面加上 导入按钮，点击导入时弹出的dialog&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;t</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="若依" scheme="http://example.com/tags/%E8%8B%A5%E4%BE%9D/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发遇到的一些问题</title>
    <link href="http://example.com/2023/03/24/uniapp-weixin-01/"/>
    <id>http://example.com/2023/03/24/uniapp-weixin-01/</id>
    <published>2023-03-24T03:15:50.000Z</published>
    <updated>2023-03-24T03:37:17.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序开发“渲染层错误”的解决方法"><a href="#微信小程序开发“渲染层错误”的解决方法" class="headerlink" title="微信小程序开发“渲染层错误”的解决方法"></a>微信小程序开发“渲染层错误”的解决方法</h2><p>详情-&gt;本地设置-&gt;调试基本库 ，选择一个合适的版本，就不会报错了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;微信小程序开发“渲染层错误”的解决方法&quot;&gt;&lt;a href=&quot;#微信小程序开发“渲染层错误”的解决方法&quot; class=&quot;headerlink&quot; title=&quot;微信小程序开发“渲染层错误”的解决方法&quot;&gt;&lt;/a&gt;微信小程序开发“渲染层错误”的解决方法&lt;/h2&gt;&lt;p&gt;详情</summary>
      
    
    
    
    <category term="微信小程序" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="uniapp" scheme="http://example.com/tags/uniapp/"/>
    
    <category term="微信小程序" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>vue：函数防抖</title>
    <link href="http://example.com/2023/03/14/Vue-Vue-03/"/>
    <id>http://example.com/2023/03/14/Vue-Vue-03/</id>
    <published>2023-03-14T07:23:56.000Z</published>
    <updated>2023-03-14T07:28:34.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h2><p>指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">debounce</span>(<span class="params">fn, delay</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fn</span>();</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>监听窗口的宽度变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getCode</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">getWindowInfo</span>, <span class="number">500</span>))</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">destroyed</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">getWindowInfo</span>, <span class="number">500</span>))</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数防抖（debounce）&quot;&gt;&lt;a href=&quot;#函数防抖（debounce）&quot; class=&quot;headerlink&quot; title=&quot;函数防抖（debounce）&quot;&gt;&lt;/a&gt;函数防抖（debounce）&lt;/h2&gt;&lt;p&gt;指触发事件后，在 n 秒内函数只能执行一次，</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="防抖" scheme="http://example.com/tags/%E9%98%B2%E6%8A%96/"/>
    
  </entry>
  
  <entry>
    <title>Vue：修改props中传过来的值</title>
    <link href="http://example.com/2023/03/14/Vue-Vue-02/"/>
    <id>http://example.com/2023/03/14/Vue-Vue-02/</id>
    <published>2023-03-14T07:15:21.000Z</published>
    <updated>2023-03-14T07:21:09.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title="sync修饰符"></a>sync修饰符</h2><p>父组件 穿进去的时候加上 .sync</p><p>子组件 通过this.$emit(‘update:xxx’, data)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-component :flag.<span class="property">sync</span>=<span class="string">&quot;list&quot;</span> /&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="title function_">methodName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:flag&#x27;</span>, <span class="variable language_">this</span>.<span class="property">newflag</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>element-ui的dialog的visible</p><p><img src="image-20230314152053756.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sync修饰符&quot;&gt;&lt;a href=&quot;#sync修饰符&quot; class=&quot;headerlink&quot; title=&quot;sync修饰符&quot;&gt;&lt;/a&gt;sync修饰符&lt;/h2&gt;&lt;p&gt;父组件 穿进去的时候加上 .sync&lt;/p&gt;
&lt;p&gt;子组件 通过this.$emit(‘update</summary>
      
    
    
    
    <category term="Vue" scheme="http://example.com/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vconsole的使用</title>
    <link href="http://example.com/2023/03/14/%E5%85%B6%E4%BB%96-vconsole/"/>
    <id>http://example.com/2023/03/14/%E5%85%B6%E4%BB%96-vconsole/</id>
    <published>2023-03-14T07:06:06.000Z</published>
    <updated>2023-03-14T07:14:23.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端开发移动端时在手机上测试的时候，看不见console.log的信息，所以调用vconsole移动端调试工具</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vconsole</span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VConsole</span> <span class="keyword">from</span> <span class="string">&#x27;vconsole&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-new,new-cap</span></span><br><span class="line">  <span class="keyword">const</span> vConsole = <span class="keyword">new</span> <span class="title class_">VConsole</span>()</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(vConsole)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印log</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前端开发移动端时在手机上测试的时候，看不见console.log的信息，所以调用vconsole移动端调试工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vconsole" scheme="http://example.com/tags/vconsole/"/>
    
  </entry>
  
  <entry>
    <title>若依菜单点不开：cannot find module &#39;@/view/system/menu/index&#39;</title>
    <link href="http://example.com/2023/03/14/%E8%8B%A5%E4%BE%9D-%E8%8B%A5%E4%BE%9D-02/"/>
    <id>http://example.com/2023/03/14/%E8%8B%A5%E4%BE%9D-%E8%8B%A5%E4%BE%9D-02/</id>
    <published>2023-03-14T06:52:50.000Z</published>
    <updated>2023-03-14T07:01:08.209Z</updated>
    
    <content type="html"><![CDATA[<p>运行若依的时候，可以运行但是点击菜单进不去，上网查了下，是webpack的版本问题</p><p><img src="image-20230314145414020.png"></p><p>解决方法：</p><p>打开src\store\modules\permission.js<br>将原本的import的写法改成require写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>], resolve)</span><br></pre></td></tr></table></figure><p><img src="image-20230314145904537.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行若依的时候，可以运行但是点击菜单进不去，上网查了下，是webpack的版本问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-20230314145414020.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;打开src\store\modules\permissi</summary>
      
    
    
    
    <category term="前端框架" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="若依" scheme="http://example.com/tags/%E8%8B%A5%E4%BE%9D/"/>
    
  </entry>
  
</feed>
